/* c.css

----------------------------------------------------------------
app.UseCors("corsPolicy");
----------------------------------------------------------------
npm install @angular/http
----------------------------------------------------------------
npm install bootstap@latest
angular.json: styles: node_mudules/bootstrap/dist/css/bootstrap.min.css
----------------------------------------------------------------
app.modules.ts
imports: FormsModule,HttpClientModule
providers: [HttpClientModule,CrudService]
----------------------------------------------------------------
npx ng g interface model/IName
----------------------------------------------------------------
const routes: Routes = [
  {path:'',component:GetDeptComponent},
  {path:'postdept',component:PostDeptComponent},
  {path:'DisplayDept',component:GetDeptComponent},
  {path:'getbyid/:departmentId',component:GetbyiddeptComponent},
  {path:'deletedept/:departmentId',component:DeletedeptComponent},
  {path:'editdept/:departmentId',component:EditdeptComponent}
];
----------------------------------------------------------------
npx ng g service service/serviceName

import { HttpClient, HttpHeaders } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { IDepartment } from '../model/idepartment';

@Injectable({
  providedIn: 'root'
})
export class CrudService {
    
  private url = "https://8080-cabbaacddbbbfabcaaaceeafebecebbffdafdefabcc.premiumproject.examly.io/api/Department"
  constructor(private httpclient: HttpClient) { }

  httpOptions = { headers: new HttpHeaders({ 'Content-type': 'application/json' }) }

  getAllDept(): Observable<any> 
  {
    return this.httpclient.get<any>(this.url)
  }

  AddDept(deptData:any):Observable<any>
  {
    return this.httpclient.post<any>(this.url+"/savedept",deptData,this.httpOptions)
  }

  FindId(departmentId:number):Observable<IDepartment>
  {
    return this.httpclient.get<IDepartment>(this.url+"/"+departmentId)
  }

  DeleteDept(departmentId:number):Observable<IDepartment>
  {
    return this.httpclient.delete<IDepartment>(this.url+"?id="+departmentId)
  }

  EditDept(deptData:IDepartment):Observable<IDepartment>
  {
    return this.httpclient.put<IDepartment>(this.url+"/EditData/"+deptData.departmentId,deptData,this.httpOptions)
  }    
}
---------------------------------------------------------------------------
npx ng g c getdept
getdept.component.ts

deptData:any[]=[]

  constructor(private cs:CrudService) {
    this.cs.getAllDept().subscribe(data=>{this.deptData.push(...data); console.log(data)})
   }
--------------------------------

component.html

<div class="container">
  
        <table class="table table-striped">
            <thead style="background-color: rgb(236, 233, 208);">
            <th>Department Id</th>
            <th>Department Name</th>
            <th>get By Id</th>
            <th>Delete action</th>
            <th>Edit action</th>
            </thead>
           
            <tr *ngFor="let d of deptData">
                <td>{{d.departmentId}}</td>
                <td>{{d.departmentName}}</td>
                <td><a [routerLink]="['/getbyid/',d.departmentId]">Details</a></td>
                <td><a [routerLink]="['/deletedept/',d.departmentId]">delete</a></td>
                <td><a [routerLink]="['/editdept/',d.departmentId]">Edit</a></td> 
            </tr>
        </table>
        <a [routerLink]="'/postdept'">Add</a><br>
  
</div>

-----------------------------------------------------------------------------
npx ng g c postdept
postdept.component.ts

constructor(private cs:CrudService, private route:Router) { }

  saveData(userData:NgForm):void{
   let deptData:object=
    { departmentId:0,
      departmentName:userData.controls['dname'].value,
      employees:null
    }
    this.cs.AddDept(deptData).subscribe(()=>
    this.route.navigate(["/DisplayDept"]));
  }

----------------------------------

component.html

<form #userData="ngForm" (ngSubmit)="saveData(userData)">
    <label>Department Id:</label>
    <br>
    <input type="text"  name="dId" #dId="ngModel" required ngModel/>
    <br><br>
 
    <label>Department Name:</label>
    <br>
    <input type="text" name="dname" #dname="ngModel" required ngModel/>
    <br><br>

    <button class="btn btn-primary" type="submit">Add</button>
  

</form>
----------------------------------------------------------------------------
delete.component.ts

constructor(private cs:CrudService, private route:Router, private activatedRoute:ActivatedRoute) { }
  deptdata:IDepartment
  departmentId:number

  ngOnInit() {
    const tid=this.activatedRoute.snapshot.paramMap.get('departmentId')
    this.departmentId=Number(tid)
    this.Findbyid(this.departmentId)
  }
 
  Findbyid(departmentId:number){
    this.cs.FindId(departmentId).subscribe((data:IDepartment)=>this.deptdata=data)
  }

 
  deleteData(userData:NgForm):void
  {
    this.cs.DeleteDept(this.departmentId).subscribe(()=>
    this.route.navigate(["/DisplayDept"]));
  }
-----------------------------------
component.html

<form #userDelete="ngForm" (ngSubmit)="deleteData(userDelete)">
    <label>Department Id:</label>
    <br>
    <input type="text"  name="departmentId" [ngModel]="deptdata.departmentId" readonly/>
    <br><br>
 
    <label>Department Name:</label>
    <br>
    <input type="text" name="departmentName" [ngModel]="deptdata.departmentName" readonly/>
    <br><br>

    <button class="btn btn-primary" type="submit">Delete</button>
    </form>
--------------------------------------------------------------------------
edit.component.ts 

departmentId:number
  deptData:IDepartment={departmentId:0,departmentName:"",employees:null}
  
  constructor(private cs:CrudService, private route:Router, private activatedRoute:ActivatedRoute) { }
  

  ngOnInit() {
    const tid=this.activatedRoute.snapshot.paramMap.get('departmentId')
    this.departmentId=Number(tid)
    this.FindId(this.departmentId)
  }
 
  FindId(departmentId:number){
    this.cs.FindId(departmentId).subscribe((data:IDepartment)=>this.deptData=data)
  }

 
  EditData(userData:NgForm):void
  {
    let deptData:IDepartment={
      departmentId: this.deptData.departmentId,
      departmentName: userData.controls["departmentName"].value,
      employees: null
    }
    this.cs.EditDept(deptData).subscribe(()=>
    this.route.navigate(["/DisplayDept"]));
  }
----------------------------------------
edit.component.html

<form #userEdit="ngForm" (ngSubmit)="EditData(userEdit)">
    <label>Department Id:</label>
    <br>
    <input type="text"  name="departmentId" [ngModel]="departmentId" readonly/>
    <br><br>
 
    <label>Department Name:</label>
    <br>
    <input type="text" name="departmentName" [ngModel]="deptData.departmentName" required />
    <br><br>

    <button class="btn btn-primary" type="submit">Edit</button>
    </form>
----------------------------------------------------------------------------------------------
getbyid.component.ts

departmentId:number
  deptData:IDepartment={departmentId:0, departmentName:"", employees:null}

  constructor(private cs:CrudService, private route:Router, private activatedRoute:ActivatedRoute) { }

  ngOnInit() {
    const tid=this.activatedRoute.snapshot.paramMap.get('departmentId')
    this.departmentId=Number(tid);
    this.cs.FindId(this.departmentId).subscribe((data:IDepartment)=>this.deptData=data)
  }
---------------------------------------------
getbyid.component.html

<h2>Details</h2>
<div>
    <p>department Id: {{departmentId}}</p>
    <p>Department Name: {{deptData.departmentName}}</p>
</div>
---------------------------------------------------------------------------------------------
create Employee interface

ts:

employee=new Employee();
 
  onSubmit(form:NgForm):void
  {
    console.log(this.employee);
  }
--------------------------------------------
template driven form

<form #userData="ngForm" (ngSubmit)="onSubmit(userData)">
    <label><h3>First Name:</h3></label><br>
    <input type="text" id="firstName" name="fname" #fname="ngModel" required minlength="2" maxlength="50" ngModel>
    <div style="color: red;" *ngIf="fname.touched && fname.invalid">
        First Name is Required
    </div>
     
    <br>
    <label><h3>Last Name:</h3></label><br>
    <input type="text" id="lastName" name="lname" #lname="ngModel" required minlength="2" maxlength="50" ngModel>
    <div style="color: red;"  *ngIf="lname.invalid && lname.touched">
        Last Name is Required
    </div>
    <br>
 
    <label><h3>Gender:</h3></label><br>
    <input type="radio" name="gender" value="male">
    <label for="male">Male</label>
    <input type="radio" name="gender" value="female">
    <label for="female">Female</label>
 
    <br>
    <label><h3>Email:</h3></label><br>
    <input type="email" id="email" name="email" #email="ngModel" required ngModel>
    <div style="color: red;"  *ngIf="email.invalid && email.touched">
        Email is Required
    </div>
    <br>
 
    <label><h3>Terms and Conditions:</h3></label><br>
    <input type="checkbox"><br>
 
    <label><h3>Address:</h3></label><br>
    <input type="text" id="address" name="add" #add="ngModel" ngModel><br>
    <label><h3>Phone:</h3></label><br>
    <input type="text" id="phone" name="ph" #ph="ngModel" ngModel><br>
 
    <button class="btn btn-primary" [disabled] type="submit">Submit</button>
 
 
</form>
-----------------------------------------------------------------------------------------------------









 */
